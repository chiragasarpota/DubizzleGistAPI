{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\dubizzle-onboarding\\\\gistapi\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport styled from \"styled-components\";\nimport Header from \"./components/Header\";\nimport GlobalStyles from \"./GlobalStyle\";\nimport GistList from \"./components/GistList\";\nimport { getPublicGists, getGistForUser } from \"./services/gistService\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  //Declaring state variables with appropriate initial states\n  const [publicList, setPublicList] = useState([]);\n  const [userList, setUserList] = useState([]);\n  const [invalidUser, setInvalidUser] = useState(false); //fetching public data on component mount\n\n  useEffect(() => {\n    const getList = async () => {\n      // Using OctoKit package functions to fetch data\n      const res = await getPublicGists();\n\n      if (res.status === 200) {\n        setPublicList(res.data);\n        console.log(\"Public: \" + publicList);\n      } else {\n        setPublicList([]);\n      }\n    };\n\n    getList();\n  }, []); //Funtion for fetching specific user data which is called on Enter key in search field\n\n  function getUserList(username) {\n    if (username === \"\") {\n      setUserList([]);\n      setInvalidUser(false); //Reset Invalid User state\n    } else {\n      getGistForUser(username).then(res => {\n        if (res.status === 200) {\n          setInvalidUser(false);\n\n          if (res.data.length > 0) {\n            setUserList(res.data); //Setting state variable for fetched data\n          } else {\n            setUserList(null);\n          }\n        }\n      }).catch(e => setInvalidUser(true)); //Invalid user state to show message on fetch failure\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    className: \"App\",\n    \"data-testid\": \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      getUserList: getUserList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GistList, {\n      gistList: userList === null ? null : userList.length > 0 ? userList : publicList //Conditionally passing state to child component\n      ,\n      invalidUser: invalidUser //To track invalid user\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GlobalStyles, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"f21pEq9avoMhJ/0h4WaEiigMlEg=\");\n\n_c = App;\nconst Wrapper = styled.div`\n  font-size: 14px;\n  line-height: 1.5;\n`;\n_c2 = Wrapper;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Wrapper\");","map":{"version":3,"sources":["C:/Projects/dubizzle-onboarding/gistapi/src/App.js"],"names":["styled","Header","GlobalStyles","GistList","getPublicGists","getGistForUser","React","useState","useEffect","App","publicList","setPublicList","userList","setUserList","invalidUser","setInvalidUser","getList","res","status","data","console","log","getUserList","username","then","length","catch","e","Wrapper","div"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,wBAA/C;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,KAAD,CAA9C,CAJgB,CAMhB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,OAAO,GAAG,YAAY;AAC1B;AACA,YAAMC,GAAG,GAAG,MAAMb,cAAc,EAAhC;;AACA,UAAIa,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBP,QAAAA,aAAa,CAACM,GAAG,CAACE,IAAL,CAAb;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAaX,UAAzB;AACD,OAHD,MAGO;AACLC,QAAAA,aAAa,CAAC,EAAD,CAAb;AACD;AACF,KATD;;AAUAK,IAAAA,OAAO;AACR,GAZQ,EAYN,EAZM,CAAT,CAPgB,CAqBhB;;AACA,WAASM,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,QAAIA,QAAQ,KAAK,EAAjB,EAAqB;AACnBV,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,MAAAA,cAAc,CAAC,KAAD,CAAd,CAFmB,CAEI;AACxB,KAHD,MAGO;AACLV,MAAAA,cAAc,CAACkB,QAAD,CAAd,CACGC,IADH,CACSP,GAAD,IAAS;AACb,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBH,UAAAA,cAAc,CAAC,KAAD,CAAd;;AACA,cAAIE,GAAG,CAACE,IAAJ,CAASM,MAAT,GAAkB,CAAtB,EAAyB;AACvBZ,YAAAA,WAAW,CAACI,GAAG,CAACE,IAAL,CAAX,CADuB,CACA;AACxB,WAFD,MAEO;AACLN,YAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF;AACF,OAVH,EAWGa,KAXH,CAWUC,CAAD,IAAOZ,cAAc,CAAC,IAAD,CAX9B,EADK,CAYkC;AACxC;AACF;;AACD,sBACE,QAAC,OAAD;AAAS,IAAA,SAAS,EAAC,KAAnB;AAAyB,mBAAY,KAArC;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAEO;AAArB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AACE,MAAA,QAAQ,EACNV,QAAQ,KAAK,IAAb,GAAoB,IAApB,GAA2BA,QAAQ,CAACa,MAAT,GAAkB,CAAlB,GAAsBb,QAAtB,GAAiCF,UADtD,CACiE;AAF3E;AAIE,MAAA,WAAW,EAAEI,WAJf,CAI4B;;AAJ5B;AAAA;AAAA;AAAA;AAAA,YAFF,eAQE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CArDD;;GAAML,G;;KAAAA,G;AAuDN,MAAMmB,OAAO,GAAG5B,MAAM,CAAC6B,GAAI;AAC3B;AACA;AACA,CAHA;MAAMD,O;AAKN,eAAenB,GAAf","sourcesContent":["import styled from \"styled-components\";\r\nimport Header from \"./components/Header\";\r\nimport GlobalStyles from \"./GlobalStyle\";\r\nimport GistList from \"./components/GistList\";\r\nimport { getPublicGists, getGistForUser } from \"./services/gistService\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst App = () => {\r\n  //Declaring state variables with appropriate initial states\r\n  const [publicList, setPublicList] = useState([]);\r\n  const [userList, setUserList] = useState([]);\r\n  const [invalidUser, setInvalidUser] = useState(false);\r\n\r\n  //fetching public data on component mount\r\n  useEffect(() => {\r\n    const getList = async () => {\r\n      // Using OctoKit package functions to fetch data\r\n      const res = await getPublicGists();\r\n      if (res.status === 200) {\r\n        setPublicList(res.data);\r\n        console.log(\"Public: \" + publicList);\r\n      } else {\r\n        setPublicList([]);\r\n      }\r\n    };\r\n    getList();\r\n  }, []);\r\n\r\n  //Funtion for fetching specific user data which is called on Enter key in search field\r\n  function getUserList(username) {\r\n    if (username === \"\") {\r\n      setUserList([]);\r\n      setInvalidUser(false); //Reset Invalid User state\r\n    } else {\r\n      getGistForUser(username)\r\n        .then((res) => {\r\n          if (res.status === 200) {\r\n            setInvalidUser(false);\r\n            if (res.data.length > 0) {\r\n              setUserList(res.data); //Setting state variable for fetched data\r\n            } else {\r\n              setUserList(null);\r\n            }\r\n          }\r\n        })\r\n        .catch((e) => setInvalidUser(true)); //Invalid user state to show message on fetch failure\r\n    }\r\n  }\r\n  return (\r\n    <Wrapper className=\"App\" data-testid=\"app\">\r\n      <Header getUserList={getUserList} />\r\n      <GistList\r\n        gistList={\r\n          userList === null ? null : userList.length > 0 ? userList : publicList //Conditionally passing state to child component\r\n        }\r\n        invalidUser={invalidUser} //To track invalid user\r\n      />\r\n      <GlobalStyles />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n`;\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}